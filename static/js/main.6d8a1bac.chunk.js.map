{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","react_default","a","createElement","className","react_router_dom","exact","to","children","Boolean","window","location","hostname","match","About","React","lazy","__webpack_require__","e","then","bind","Contacts","Home","Projects","Project","ReactDOM","render","src_App_0","Suspense","fallback","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAkBeA,EAdH,SAAAC,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,QAGAN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,GAAG,UAAZ,SACAN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,GAAG,aAAZ,YACAN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,GAAG,aAAZ,aAEDP,EAAMQ,WCFSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECXAC,EAAQC,IAAMC,KAAK,kBACvBC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAIIC,EAAWN,IAAMC,KAAK,kBAC1BC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAIIE,EAAOP,IAAMC,KAAK,kBACtBC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAEIG,EAAWR,IAAMC,KAAK,kBAC1BC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAIII,EAAUT,IAAMC,KAAK,kBACzBC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAKFK,IAASC,OACPzB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACwB,EAAD,KACE1B,EAAAC,EAAAC,cAACF,EAAAC,EAAM0B,SAAP,CAAgBC,SAAU5B,EAAAC,EAAAC,cAAA,0BACxBF,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOxB,OAAK,EAACyB,KAAK,IAAIC,UAAWV,IACjCrB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOxB,OAAK,EAACyB,KAAK,SAASC,UAAWlB,IACtCb,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOxB,OAAK,EAACyB,KAAK,YAAYC,UAAWT,IACzCtB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWR,IACvCvB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOxB,OAAK,EAACyB,KAAK,YAAYC,UAAWX,QAKjDY,SAASC,eAAe,SDoFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.6d8a1bac.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport { NavLink } from 'react-router-dom'\n\nconst App = props => (\n  <div className='app'>\n    <header className='app-header'>\n      <NavLink exact to='/'>\n        Home\n      </NavLink>\n      <NavLink to='/about'>About</NavLink>\n      <NavLink to='/projects'>Projects</NavLink>\n      <NavLink to='/contacts'>Contacts</NavLink>\n    </header>\n    {props.children}\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nconst About = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"About\", webpackPrefetch: true */ './routes/About'\n  ),\n)\nconst Contacts = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"Contacts\", webpackPrefetch: true */ './routes/Contacts'\n  ),\n)\nconst Home = React.lazy(() =>\n  import(/* webpackChunkName: \"Home\", webpackPrefetch: true */ './routes/Home'),\n)\nconst Projects = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"Projects\", webpackPrefetch: true */ './routes/Projects'\n  ),\n)\nconst Project = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"Project\", webpackPrefetch: true */ './routes/Project'\n  ),\n)\n\nReactDOM.render(\n  <Router>\n    <App>\n      <React.Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/about' component={About} />\n          <Route exact path='/projects' component={Projects} />\n          <Route path='/projects/:id' component={Project} />\n          <Route exact path='/contacts' component={Contacts} />\n        </Switch>\n      </React.Suspense>\n    </App>\n  </Router>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}